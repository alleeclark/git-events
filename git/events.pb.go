// Code generated by protoc-gen-go. DO NOT EDIT.
// source: events.proto

package git

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type EventRequest struct {
	Topics               []string `protobuf:"bytes,2,rep,name=topics,proto3" json:"topics,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EventRequest) Reset()         { *m = EventRequest{} }
func (m *EventRequest) String() string { return proto.CompactTextString(m) }
func (*EventRequest) ProtoMessage()    {}
func (*EventRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8f22242cb04491f9, []int{0}
}

func (m *EventRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EventRequest.Unmarshal(m, b)
}
func (m *EventRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EventRequest.Marshal(b, m, deterministic)
}
func (m *EventRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventRequest.Merge(m, src)
}
func (m *EventRequest) XXX_Size() int {
	return xxx_messageInfo_EventRequest.Size(m)
}
func (m *EventRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_EventRequest.DiscardUnknown(m)
}

var xxx_messageInfo_EventRequest proto.InternalMessageInfo

func (m *EventRequest) GetTopics() []string {
	if m != nil {
		return m.Topics
	}
	return nil
}

type EventResponse struct {
	Topic                string            `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`
	Filename             string            `protobuf:"bytes,2,opt,name=filename,proto3" json:"filename,omitempty"`
	Contents             []byte            `protobuf:"bytes,3,opt,name=contents,proto3" json:"contents,omitempty"`
	Metadata             map[string]string `protobuf:"bytes,4,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *EventResponse) Reset()         { *m = EventResponse{} }
func (m *EventResponse) String() string { return proto.CompactTextString(m) }
func (*EventResponse) ProtoMessage()    {}
func (*EventResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8f22242cb04491f9, []int{1}
}

func (m *EventResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EventResponse.Unmarshal(m, b)
}
func (m *EventResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EventResponse.Marshal(b, m, deterministic)
}
func (m *EventResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventResponse.Merge(m, src)
}
func (m *EventResponse) XXX_Size() int {
	return xxx_messageInfo_EventResponse.Size(m)
}
func (m *EventResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_EventResponse.DiscardUnknown(m)
}

var xxx_messageInfo_EventResponse proto.InternalMessageInfo

func (m *EventResponse) GetTopic() string {
	if m != nil {
		return m.Topic
	}
	return ""
}

func (m *EventResponse) GetFilename() string {
	if m != nil {
		return m.Filename
	}
	return ""
}

func (m *EventResponse) GetContents() []byte {
	if m != nil {
		return m.Contents
	}
	return nil
}

func (m *EventResponse) GetMetadata() map[string]string {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func init() {
	proto.RegisterType((*EventRequest)(nil), "EventRequest")
	proto.RegisterType((*EventResponse)(nil), "EventResponse")
	proto.RegisterMapType((map[string]string)(nil), "EventResponse.MetadataEntry")
}

func init() { proto.RegisterFile("events.proto", fileDescriptor_8f22242cb04491f9) }

var fileDescriptor_8f22242cb04491f9 = []byte{
	// 239 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x90, 0x41, 0x4b, 0xc3, 0x30,
	0x14, 0xc7, 0x49, 0x63, 0xc7, 0xf6, 0x6c, 0x45, 0x82, 0x48, 0x28, 0x1e, 0xca, 0x0e, 0x92, 0x53,
	0x91, 0x79, 0x99, 0x7a, 0x13, 0x76, 0xf4, 0x12, 0x6f, 0xde, 0x62, 0x7d, 0x4a, 0x71, 0x4b, 0x6a,
	0xf3, 0x56, 0xd8, 0xf7, 0xf4, 0x03, 0x49, 0xba, 0x58, 0xd6, 0x5b, 0x7e, 0xf9, 0x3d, 0x78, 0xff,
	0xf7, 0x87, 0x0c, 0x7b, 0xb4, 0xe4, 0xab, 0xb6, 0x73, 0xe4, 0x96, 0xb7, 0x90, 0x6d, 0x02, 0x6b,
	0xfc, 0xd9, 0xa3, 0x27, 0x71, 0x0d, 0x33, 0x72, 0x6d, 0x53, 0x7b, 0x99, 0x94, 0x5c, 0x2d, 0x74,
	0xa4, 0xe5, 0x2f, 0x83, 0x3c, 0x0e, 0xfa, 0xd6, 0x59, 0x8f, 0xe2, 0x0a, 0xd2, 0xc1, 0x49, 0x56,
	0x32, 0xb5, 0xd0, 0x47, 0x10, 0x05, 0xcc, 0x3f, 0x9b, 0x2d, 0x5a, 0xb3, 0x43, 0x99, 0x0c, 0x62,
	0xe4, 0xe0, 0x6a, 0x67, 0x29, 0x6c, 0x97, 0xbc, 0x64, 0x2a, 0xd3, 0x23, 0x8b, 0x35, 0xcc, 0x77,
	0x48, 0xe6, 0xc3, 0x90, 0x91, 0x67, 0x25, 0x57, 0xe7, 0xab, 0x9b, 0x6a, 0xb2, 0xaf, 0x7a, 0x89,
	0x7a, 0x63, 0xa9, 0x3b, 0xe8, 0x71, 0xba, 0x78, 0x82, 0x7c, 0xa2, 0xc4, 0x25, 0xf0, 0x6f, 0x3c,
	0xc4, 0x58, 0xe1, 0x19, 0xa2, 0xf6, 0x66, 0xbb, 0xff, 0x4f, 0x74, 0x84, 0xc7, 0x64, 0xcd, 0x56,
	0x0f, 0xf1, 0x2a, 0xff, 0x8a, 0x5d, 0xdf, 0xd4, 0x28, 0x14, 0xa4, 0xc3, 0x87, 0xc8, 0xab, 0xd3,
	0x5e, 0x8a, 0x8b, 0x69, 0x9a, 0x3b, 0xf6, 0x9c, 0xbe, 0xf1, 0xaf, 0x86, 0xde, 0x67, 0x43, 0x8f,
	0xf7, 0x7f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x8b, 0x45, 0x72, 0x22, 0x57, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// EventsServiceClient is the client API for EventsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type EventsServiceClient interface {
	Event(ctx context.Context, in *EventRequest, opts ...grpc.CallOption) (EventsService_EventClient, error)
}

type eventsServiceClient struct {
	cc *grpc.ClientConn
}

func NewEventsServiceClient(cc *grpc.ClientConn) EventsServiceClient {
	return &eventsServiceClient{cc}
}

func (c *eventsServiceClient) Event(ctx context.Context, in *EventRequest, opts ...grpc.CallOption) (EventsService_EventClient, error) {
	stream, err := c.cc.NewStream(ctx, &_EventsService_serviceDesc.Streams[0], "/EventsService/Event", opts...)
	if err != nil {
		return nil, err
	}
	x := &eventsServiceEventClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type EventsService_EventClient interface {
	Recv() (*EventResponse, error)
	grpc.ClientStream
}

type eventsServiceEventClient struct {
	grpc.ClientStream
}

func (x *eventsServiceEventClient) Recv() (*EventResponse, error) {
	m := new(EventResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// EventsServiceServer is the server API for EventsService service.
type EventsServiceServer interface {
	Event(*EventRequest, EventsService_EventServer) error
}

func RegisterEventsServiceServer(s *grpc.Server, srv EventsServiceServer) {
	s.RegisterService(&_EventsService_serviceDesc, srv)
}

func _EventsService_Event_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EventRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EventsServiceServer).Event(m, &eventsServiceEventServer{stream})
}

type EventsService_EventServer interface {
	Send(*EventResponse) error
	grpc.ServerStream
}

type eventsServiceEventServer struct {
	grpc.ServerStream
}

func (x *eventsServiceEventServer) Send(m *EventResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _EventsService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "EventsService",
	HandlerType: (*EventsServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Event",
			Handler:       _EventsService_Event_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "events.proto",
}
